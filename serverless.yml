service: ielts-genai-prep
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 1024
  timeout: 30
  
  environment:
    DYNAMODB_USERS_TABLE: ${self:service}-users-${self:provider.stage}
    DYNAMODB_ASSESSMENTS_TABLE: ${self:service}-assessments-${self:provider.stage}
    DYNAMODB_SESSIONS_TABLE: ${self:service}-sessions-${self:provider.stage}
    APPLE_SHARED_SECRET: ${env:APPLE_SHARED_SECRET}
    GOOGLE_SERVICE_ACCOUNT_JSON: ${env:GOOGLE_SERVICE_ACCOUNT_JSON}
    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USERS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_ASSESSMENTS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SESSIONS_TABLE}"
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:InvokeModelWithResponseStream
          Resource:
            - "arn:aws:bedrock:us-east-1::foundation-model/amazon.nova-sonic-v1"
            - "arn:aws:bedrock:*::foundation-model/amazon.nova-micro-v1"
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource:
            - "arn:aws:execute-api:${self:provider.region}:*:*/*/*"

functions:
  api:
    handler: lambda_handler.lambda_handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
      - http:
          path: /
          method: ANY
          cors: true
    
  websocket:
    handler: lambda_handler.websocket_handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: nova-sonic-stream

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalTables:
          - Region: us-east-1
          - Region: eu-west-1
          - Region: ap-southeast-1
    
    AssessmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_ASSESSMENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: assessment_id
            AttributeType: S
          - AttributeName: user_email
            AttributeType: S
        KeySchema:
          - AttributeName: assessment_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserEmailIndex
            KeySchema:
              - AttributeName: user_email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        GlobalTables:
          - Region: us-east-1
          - Region: eu-west-1
          - Region: ap-southeast-1
    
    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_SESSIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: session_id
            AttributeType: S
        KeySchema:
          - AttributeName: session_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expires_at
          Enabled: true

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    slim: true