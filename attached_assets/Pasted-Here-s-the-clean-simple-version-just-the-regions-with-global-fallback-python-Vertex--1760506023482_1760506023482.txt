Here’s the clean, simple version - **just the regions with global fallback**:

```python
"""
Vertex AI Regional Routing with Global Fallback
"""

# 7 Regional Endpoints
REGION_MAP = {
    # South Asia
    'IN': 'asia-south1', 'PK': 'asia-south1', 'BD': 'asia-south1', 
    'LK': 'asia-south1', 'NP': 'asia-south1', 'AF': 'asia-south1',
    
    # Southeast Asia
    'SG': 'asia-southeast1', 'MY': 'asia-southeast1', 'TH': 'asia-southeast1',
    'ID': 'asia-southeast1', 'PH': 'asia-southeast1', 'VN': 'asia-southeast1',
    'KH': 'asia-southeast1', 'LA': 'asia-southeast1', 'MM': 'asia-southeast1',
    
    # South Korea
    'KR': 'asia-northeast3',
    
    # Japan
    'JP': 'asia-northeast1',
    
    # Greater China (Taiwan, Hong Kong)
    'TW': 'asia-east1', 'HK': 'asia-east1', 'MO': 'asia-east1',
    
    # Europe + Middle East + Africa
    'GB': 'europe-west1', 'FR': 'europe-west1', 'DE': 'europe-west1',
    'IT': 'europe-west1', 'ES': 'europe-west1', 'NL': 'europe-west1',
    'PL': 'europe-west1', 'SA': 'europe-west1', 'AE': 'europe-west1',
    'NG': 'europe-west1', 'ZA': 'europe-west1', 'EG': 'europe-west1',
    # (add more EU/ME/Africa countries as needed)
    
    # Americas
    'US': 'us-central1', 'CA': 'us-central1', 'BR': 'us-central1',
    'MX': 'us-central1', 'AR': 'us-central1', 'CL': 'us-central1',
}

def get_region(country_code, use_global_fallback=False):
    """
    Get optimal region for country code.
    
    Args:
        country_code: ISO 3166-1 alpha-2 country code (e.g., 'IN', 'KR')
        use_global_fallback: If True, use 'global' endpoint as fallback
    
    Returns:
        Region string for Vertex AI
    """
    if country_code in REGION_MAP:
        return REGION_MAP[country_code]
    
    # Fallback logic
    if use_global_fallback:
        return 'global'  # Global endpoint for max availability
    else:
        return 'asia-southeast1'  # Singapore as regional fallback
```

## **Usage:**

```python
import vertexai
from vertexai.generative_models import GenerativeModel

# Get user's country code (from IP geolocation, user profile, etc.)
user_country = 'KR'  # South Korea

# Get optimal region
region = get_region(user_country)

# Initialize Vertex AI with that region
vertexai.init(project='your-project-id', location=region)

# Create model
model = GenerativeModel('gemini-2.5-flash-lite')

# Make request
response = model.generate_content("Hello!")
```

## **With Retry Logic (Regional → Global Fallback):**

```python
def get_response_with_fallback(country_code, prompt, project_id):
    """Try regional endpoint first, fall back to global on error"""
    
    # Try regional endpoint first
    try:
        region = get_region(country_code, use_global_fallback=False)
        vertexai.init(project=project_id, location=region)
        model = GenerativeModel('gemini-2.5-flash-lite')
        return model.generate_content(prompt)
    
    except Exception as e:
        print(f"Regional endpoint failed: {e}, trying global fallback...")
        
        # Fall back to global endpoint
        vertexai.init(project=project_id, location='global')
        model = GenerativeModel('gemini-2.5-flash-lite')
        return model.generate_content(prompt)
```

**That’s it!** Simple, clean, production-ready routing for all your target markets.​​​​​​​​​​​​​​​​