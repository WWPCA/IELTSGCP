# Enterprise Scaling Configuration for 250,000 Concurrent Users
# IELTS GenAI Prep - Production Infrastructure

# Container Orchestration (Kubernetes)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ielts-genai-prep
  labels:
    app: ielts-genai-prep
spec:
  replicas: 50  # Start with 50 pods, auto-scale up to 200
  selector:
    matchLabels:
      app: ielts-genai-prep
  template:
    metadata:
      labels:
        app: ielts-genai-prep
    spec:
      containers:
      - name: ielts-app
        image: ielts-genai-prep:latest
        ports:
        - containerPort: 5000
        env:
        - name: WORKERS
          value: "8"
        - name: THREADS
          value: "16"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: url
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 45
          periodSeconds: 20

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ielts-genai-prep-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ielts-genai-prep
  minReplicas: 50
  maxReplicas: 200
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: ielts-genai-prep-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
  selector:
    app: ielts-genai-prep

---
# Database Configuration (PostgreSQL Cluster)
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: ielts-postgres-cluster
spec:
  instances: 3  # Primary + 2 read replicas
  primaryUpdateStrategy: unsupervised
  
  postgresql:
    parameters:
      max_connections: "1000"
      shared_buffers: "2GB"
      effective_cache_size: "8GB"
      work_mem: "64MB"
      maintenance_work_mem: "512MB"
      checkpoint_completion_target: "0.9"
      wal_buffers: "16MB"
      default_statistics_target: "100"
      random_page_cost: "1.1"
      effective_io_concurrency: "200"
      
  bootstrap:
    initdb:
      database: ielts_genai_prep
      owner: ielts_user
      
  storage:
    size: 500Gi
    storageClass: gp3-ssd

---
# Redis Cache Cluster
apiVersion: redis.redis.opstreelabs.in/v1beta1
kind: RedisCluster
metadata:
  name: ielts-redis-cluster
spec:
  clusterSize: 6
  clusterVersion: v7
  persistenceEnabled: true
  redisExporter:
    enabled: true
  storage:
    volumeClaimTemplate:
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 100Gi

---
# Configuration for Production Scaling
production_config:
  # Application Servers
  app_instances: 50-200  # Auto-scaling based on load
  workers_per_instance: 8
  threads_per_worker: 16
  total_capacity: 25,600 concurrent requests
  
  # Database Scaling
  postgres_primary: 1  # Write operations
  postgres_replicas: 2  # Read operations
  connection_pool_size: 100
  max_connections: 1000
  
  # Cache Layer
  redis_cluster_nodes: 6
  redis_memory: 32GB
  cache_strategy: "write-through"
  
  # CDN Configuration
  cloudflare_zones:
    - static_assets
    - api_responses
    - user_uploads
  
  # Nova Sonic Scaling
  bedrock_quotas:
    nova_sonic: 1000  # Concurrent requests
    nova_micro: 2000  # Concurrent requests
    rate_limit: "10000/minute"
  
  # Monitoring
  prometheus_metrics: enabled
  grafana_dashboards: enabled
  alertmanager_rules: enabled
  log_aggregation: "elasticsearch"