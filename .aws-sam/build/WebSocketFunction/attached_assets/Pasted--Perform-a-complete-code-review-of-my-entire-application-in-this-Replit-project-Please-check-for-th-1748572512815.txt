“Perform a complete code review of my entire application in this Replit project. Please check for the following:
1.  Errors and Bugs: Identify any syntax errors, runtime errors, or logical errors in the code. Provide specific details about the location (file, line number) and nature of each issue, along with suggested fixes.
2.  Redundant Code: Detect any redundant or duplicated code, such as repeated functions, unnecessary variables, or repetitive logic. Suggest ways to consolidate or refactor these sections for better efficiency and readability.
3.  Code Quality: Evaluate the code for adherence to best practices, including:
	•  Proper variable naming conventions (clear, descriptive names).
	•  Consistent formatting and style (e.g., indentation, spacing).
	•  Efficient algorithms and logic (highlight any overly complex or inefficient code).
4.  Potential Edge Cases: Identify areas where the code might fail under specific conditions (e.g., invalid inputs, null values, or boundary cases). Suggest how to handle these edge cases to prevent errors during testing.
5.  Security Issues: Check for common security vulnerabilities (e.g., SQL injection, improper input validation, or exposed sensitive data) and recommend fixes.
6.  Performance Optimization: Highlight any performance bottlenecks, such as inefficient loops, excessive database queries, or resource-heavy operations, and suggest optimizations.
7.  Testing Recommendations: Suggest additional test cases or testing strategies to ensure the code is robust and error-free during testing. If applicable, recommend unit tests or integration tests to cover critical functionality.
8.  Compatibility: Verify that the code is compatible with the target environment (e.g., specific versions of libraries, frameworks, or Replit’s runtime).
9.  Documentation: Check for missing or unclear comments and documentation. Suggest improvements to make the code easier to understand and maintain.
Please provide a detailed report with:
•  A summary of all findings, categorized by the above criteria.
•  Specific code snippets or references (file and line numbers) for each issue.
•  Actionable recommendations for fixing or improving each identified problem.