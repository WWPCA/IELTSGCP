I want to create an IELTS test preparation app using Replit that helps users globally prepare for the IELTS exam. The app should be a web application with plans to explore native iOS and Android versions later. It targets key markets: South Asia (e.g., India, Pakistan), the Middle East (e.g., UAE, Saudi Arabia), Europe (e.g., UK, Germany), Japan, and South Korea. Here’s a detailed description of the app and its features to build in Replit:

App Overview:
Name: 'IELTS AI Prep'.
Purpose: Educate users about the IELTS test and provide subscription-based practice resources, including an AI-powered speaking assessment tool using AWS Transcribe and Amazon Polly.
Tech Stack: Use Python with Flask for the backend, HTML/CSS/JavaScript for the frontend, and SQLite or Replit’s database for storage. Deploy via Replit’s web hosting.
Feature 1: Understanding the Test Structure
Create static pages to explain the IELTS test, referencing https://takeielts.britishcouncil.org/ for the different types of IELTS tests and their details:
IELTS Academic: For study at undergraduate/postgraduate levels or professional registration (e.g., healthcare councils like GMC, NMC). Tests listening (30 min + 10 min transfer), reading (60 min), writing (60 min), speaking (11-14 min).
IELTS General Training: For work, migration, or below-degree study in English-speaking countries. Same format as Academic but with different reading/writing content.
IELTS for UKVI (Academic/General Training): Secure English Language Test (SELT) for UK visa applications (work, study, live). Identical format to standard tests but at approved centers.
IELTS Life Skills: For UK visa applications (e.g., citizenship, settlement). Tests speaking and listening only, available at A1, B1 levels (16-22 min).
IELTS Online: Academic test taken remotely, same format, results in 6-8 days, not accepted for immigration. Requires specific equipment (stable internet, mic, webcam).
Design: One page per test type with text, sample images, and a ‘Next’ button to guide users through all types. Include Listening (4 sections, 40 questions), Reading (3 passages, 40 questions), Writing (Task 1: 150 words, Task 2: 250 words), Speaking (3 parts) details where applicable.
Replit Setup:
Frontend: Create HTML files (e.g., academic.html, general_training.html) in a templates folder, styled with CSS (static/style.css). Use Flask routes (e.g., @app.route('/academic')) to render each page.
Backend: Store content in a SQLite table (test_structure: Test_Type, Description, Format_Details, Sample_Image_URL) based on British Council data.
Navigation: Add ‘Next’ buttons with JavaScript or Flask redirects.
Feature 2: Subscription-Based Practice Tests
Offer practice tests in the exact IELTS format (Listening, Reading, Writing), using https://takeielts.britishcouncil.org/take-ielts/prepare/free-ielts-english-practice-tests to create a database of practice exams:
Listening: Audio clips (e.g., sample conversations, monologues) with 40 multiple-choice/fill-in questions.
Reading: 3 text passages (e.g., articles, ads) with 40 questions (e.g., multiple-choice, true/false).
Writing: Task 1 (150-word input) and Task 2 (250-word essay) with word count trackers.
Access: Non-subscribers get a sample test overview (structure only, no questions); subscribers unlock unlimited tests (e.g., 5/month for monthly plan, 60/year for annual).
Replit Setup:
Database: Use SQLite (practice_tests.db) with a table (practice_tests: Test_Type, Section, Questions_JSON, Answers_JSON, Audio_URL). Populate with sample questions from the British Council site (e.g., Listening Section 1: ‘Booking a holiday’ audio, 10 questions).
Frontend: Build a tests.html page with JavaScript to fetch and display questions (e.g., via fetch('/api/tests')), using <audio> tags for Listening and <input> for answers.
Backend: Flask routes (e.g., /api/tests) return test data if user is subscribed (check users table).
Subscription Logic:
Payment Integrations:
Regional Options (visible only to users in specific regions, displayed before global options):
India: Razorpay.
Pakistan: JazzCash, Easypaisa.
Bangladesh: bKash, Nagad.
Sri Lanka: LankaPay, Direct Pay.
Nepal: ConnectIPS, PrabhuPAY, eSewa.
Saudi Arabia: STC Pay.
Japan: LINE Pay, PayPay, Suica/PASMO.
South Korea: KakaoPay, Naver Pay, ZeroPay.
Eastern Europe: Revolut.
Poland: BLIK.
Netherlands: iDEAL.
Germany: Sofort.
France: Cartes Bancaires.
Global Options (visible to all users, displayed after regional options): Stripe, Google Pay, Apple Pay, Qiwi, PayPal.
Replit Setup for Payments:
Backend: Use Python requests library to integrate APIs (e.g., Stripe: https://api.stripe.com/v1/charges, Razorpay: https://api.razorpay.com/v1/payments). Store API keys in Replit’s .env file (e.g., load_dotenv()).
Database: Create a payment_methods table (Name, Region, API_Endpoint, Display_Order) where regional options have Display_Order = 1 and global options have Display_Order = 2.
Frontend: On subscribe.html, use JavaScript to fetch payment options from /api/payment_methods, sort by Display_Order, and filter by user region (e.g., if user.region === 'India', show Razorpay first, then Stripe). Render as a dropdown.
Workflow: On ‘Subscribe Now’ click, POST to the selected gateway’s endpoint, verify payment success via webhook or callback, update users.subscribed to ‘Yes’.
Feature 3: AI-Powered Speaking Section with AWS Transcribe and Polly
Functionality: Users record a 30-second response to an IELTS-style prompt (e.g., ‘Describe your hometown’), the app sends it to AWS Transcribe for speech-to-text conversion, processes the text for IELTS scoring (Fluency, Coherence, Vocabulary, Grammar, Pronunciation), and uses Amazon Polly to deliver spoken feedback.
Replit Setup:
Frontend: Build a speaking.html page with a ‘Record’ button (use Web Audio API or RecordRTC), prompt text, and feedback display (<audio> for playback).
Backend:
AWS Transcribe: POST audio to https://transcribe.us-west-2.amazonaws.com using boto3 or requests ($0.0072/minute real-time). Return transcription.
Scoring Logic: Write a Python function (e.g., score_response(transcript)) to analyze text (e.g., count pauses, unique words) or call OpenAI API if needed. Return scores (1-9).
Amazon Polly: POST feedback text to https://polly.us-west-2.amazonaws.com ($0.004/1,000 characters), get MP3, serve via Flask.
Workflow: On record stop, upload audio to /api/speaking, process with Transcribe, score, generate Polly audio, return feedback URL to frontend.
Database: Store in speaking_responses (User_ID, Prompt, Audio_URL, Transcription, Scores_JSON, Feedback_Audio_URL).
Feature 4: Global Deployment Features
Multi-Currency Payments: Configure gateways to handle local currencies (e.g., INR, AED, JPY, KRW, EUR) via API parameters.
Localization: Add a language selector; store translations in SQLite (translations: Page, Element, Language, Text). Use Flask’s render_template with dynamic text.
Replit Setup: Python logic to set currency based on users.region; fetch translations via /api/translations.
Feature 5: Connectivity Optimization for South Asia
Goal: Ensure reliability in South Asia (e.g., India, Pakistan) with inconsistent internet.
Strategies:
Offline Mode: Cache 1-2 tests in browser localStorage; sync via /api/sync when online.
Low-Bandwidth Audio: Compress audio to 64 kbps (e.g., using pydub in Python).
Retry Logic: Add Python retry decorator (e.g., tenacity) for API calls, retry 3 times with 5-second delays.
Lightweight UI: Minimize assets; use text-based pages.
Replit Setup: Flask route to serve compressed audio; JavaScript to cache and sync.
Feature 6: Device Specs Information
Specs: Web (Chrome/Firefox/Safari, 2GB RAM, 1 Mbps min/5 Mbps recommended); Mobile (future: iOS 15+/Android 10+, 2GB RAM, mic). For IELTS Online, add stable internet, mic, webcam per British Council.
Design: Add device_specs.html with text and a mic test button (Web Audio API).
Replit Setup: Flask route (/device_specs) renders page; JS to test mic and alert compatibility.
User Management:
Features: Email/password login, profile with subscription status, test history, speaking feedback.
Replit Setup: SQLite users table (Email, Password_Hash, Subscription_Status, Region, Test_History_JSON, Speaking_Scores_JSON); Flask-Login for auth.
Technical Requirements:
Hosting: Use Replit’s free tier to build and test (repl.co URL). Upgrade to Replit’s paid hosting or external server (e.g., AWS) for deployment.
Mobile: Plan for frameworks like Flutter later.
Analytics: Integrate Google Analytics via JS snippet in HTML.
Workflows to Build:
Homepage: Buttons to ‘Learn About IELTS’ (/test_structure) or ‘Subscribe’ (/subscribe).
Subscription: Dropdown shows regional options first (e.g., Razorpay), then global (e.g., Stripe); POST to gateway API, update subscription on success.
Speaking: Record audio, POST to /api/speaking, process with Transcribe/Polly, return feedback.
Practice Tests: Submit answers to /api/submit_test, calculate scores, display results.
Offline Sync: POST cached answers to /api/sync.
This app should be intuitive, scalable, and optimized for South Asian connectivity while informing users of device needs. Use Replit’s free tier to code and test before deploying. Please guide me through setting this up in Replit with specific files, code snippets, and database structures!